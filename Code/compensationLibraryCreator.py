# -*- coding: utf-8 -*-
"""
Created on Wed Mar  8 14:08:21 2017

@author: max.karlsson
"""
    
from Printicek import daviPrint
import compensator_tools as tools
flatten = lambda l: [item for sublist in l for item in sublist]

class compensationObject(object):

    def __init__(self, peptideObject, labels, peaksInCluster, IAA):
        #Get specifics from peptideObject:
        self.sequence = peptideObject.sequence 
        self.charge = peptideObject.charge
        self.includedPeaks = peptideObject.includedPeaks
        self.fragments = peptideObject.fragments.keys()
        self.labels = labels
        
        #Calculate monoisotopic composition of light and heavy precursors:
        lightMonoisoComp = tools.calculate_composition(self.sequence, self.charge, IAA)
        heavyMonoisoComp = tools.calculate_composition(self.sequence, self.charge, IAA, heavy=True, labels=labels)
        
        #Calculate which isoforms that give rise to the isotope cluster that 
        #are present in the isolation window:
        self.lightIsolatedIsoforms, self.heavyIsolatedIsoforms = self.__calculate_isoforms()
        
        #Get which peaks that are present in the MS1 precursor cluster (not the
        #same as which peaks are isolated):
        lightMS1cluster = ['l'+str(i) for i in range(peaksInCluster)]
        heavyMS1cluster = ['h'+str(i) for i in range(peaksInCluster)]
        
        #Calculate light isolated cluster MS1 distribution:
        self.lightMS1distribution = tools.calculate_distribution(lightMonoisoComp, self.lightIsolatedIsoforms)
        #Calculate heavy isolated cluster MS1 distribution:
        self.heavyMS1distribution = tools.calculate_distribution(heavyMonoisoComp, self.heavyIsolatedIsoforms)
        
        #Get the number of neutrons in label:
        self.KlabelNeutrons, self.RlabelNeutrons = tools.calculate_labelNeutrons(labels)
        #Calculates which peaks overlap in MS2 fragments:
        self.__calculate_allOverlappingPeaks(self.fragments, peaksInCluster)
        #Calculates compensation constants:
        self.__calculate_compensationConstants(IAA, labels, self.lightIsolatedIsoforms, self.heavyIsolatedIsoforms)

    def __calculate_isoforms(self):
        includedLightPeaks = [int(peak[-1]) for peak in self.includedPeaks if 'l' in peak]
        includedLightPeaks = (min(includedLightPeaks), max(includedLightPeaks))
        lightIsolatedIsoforms = tools.calculate_isoforms(self.sequence, includedPeaks=includedLightPeaks)
        
        includedHeavyPeaks = [int(peak[-1]) for peak in self.includedPeaks if 'h' in peak]
        includedHeavyPeaks = (min(includedHeavyPeaks), max(includedHeavyPeaks))
        heavyIsolatedIsoforms = tools.calculate_isoforms(self.sequence, includedPeaks=includedHeavyPeaks)
        
        return lightIsolatedIsoforms, heavyIsolatedIsoforms
    
    def __calculate_allOverlappingPeaks(self, fragments, peaksInCluster):
        """ Calculates peak overlaps for each and every fragment. b-fragments 
            are ignored as they always overlap and should be ignored in 
            co-isolated runs.
        """
        
        self.overlappingPeaks = {}
        #MS2 peaks:
        for fragment in fragments:
            fragmentType = fragment[0]
            #Skip b-fragments:
            if fragmentType == 'b':
                continue
            elif fragmentType == 'y':
                self.overlappingPeaks[fragment] = tools.calculate_overlappingPeak(fragment, self.sequence, 
                                                                                self.KlabelNeutrons, self.RlabelNeutrons, self.includedPeaks)
        '''
        #MS1 peaks:
        #Function for flattening two-dimensional list:
        flatten = lambda l: [item for sublist in l for item in sublist]
        for fragment in flatten([('l'+str(i),'h'+str(i)) for i in range(peaksInCluster)]):
            self.overlappingPeaks[fragment] = tools.calculate_overlappingPrecursorPeak(fragment, self.sequence, 
                                                                                KlabelNeutrons, RlabelNeutrons, 
        '''
    def __calculate_compensationConstants(self, IAA, labels, lightIsoforms, heavyIsoforms):
        """ Calculates compensation constants that can be used to multiply with
            a called MS2 peak to get its MS1 distribution pattern.
        """
        self.compensationConstants = {}
        
        fragments = [fragment.split(' ')[0]+' '+fragment.split(' ')[1][0]+'+'*fragment.count('+') for fragment in self.fragments]
        for fragment in sorted(fragments):
            if fragment in self.compensationConstants.keys():
                continue
            fragmentType = fragment[0]
            #Skip b-fragments:
            if fragmentType == 'b':
                continue
            elif fragmentType == 'y':
                fragmentNumber, fragmentSequence, charge, heavyLightIdentifyer = tools.getFragmentInfo(fragment, self.sequence)
                #Get the proper reference distribution set:
                if heavyLightIdentifyer == 'h':
                    heavy=True
                    refPrecursorDistribution = self.heavyMS1distribution
                    HorLisoforms = heavyIsoforms
                elif heavyLightIdentifyer == 'l':
                    heavy=False
                    refPrecursorDistribution = self.lightMS1distribution
                    HorLisoforms = lightIsoforms
                
                #Calculate distribution:
                monoisotopicComposition = tools.calculate_composition(fragmentSequence, charge, IAA, heavy=heavy, labels=labels)
                distribution = tools.calculate_distribution(monoisotopicComposition, HorLisoforms)
                #Calculate compensation constant:
                for peakNumber, abundance in enumerate(distribution):
                    compensationConstant = refPrecursorDistribution[peakNumber]/abundance
                    identifyer = fragment.split(' ')[0] + ' ' + heavyLightIdentifyer+str(peakNumber)+'+'*fragment.count('+')
                    self.compensationConstants[identifyer] = compensationConstant
        
        

def create_compensationLibrary(peptideSettings, settings):
    """ Creates a library of compensation objects that can be used to 
        compensate intensities.
    """
    compensationLibrary = {}
    daviPrint('Calculating compensation constants...', line=True)
    #Parse through peptides:
    for peptide in peptideSettings.values():
        #Print sequence:
        daviPrint(peptide.sequence)
        #Create compensation object:
        compObj = compensationObject(peptide, settings['Heavy labels'], settings['Peaks in isotope clusters'], settings['IAA'])
        compensationLibrary[peptide.sequence+'+'*peptide.charge] = compObj
        
    return compensationLibrary
    
def docTests():
    """ 
    >>> from mass_calculator import massCalculator
    >>> isolationListPath = 'C:/Users/max.karlsson/Documents/Max/Projects/Wellness project/WellnessIsolationList short dummy.csv'
    >>> settings = {'Isolation window offset': 1.25, 'Max fragment charge': 2, 'MS2 tolerance': 7.0, 'MS1 tolerance': 10.0, 'Co-isolation': 1, 'Scheduled run': 0, 'Include b-fragments': 1, 'Fragment peptide calling': 0, 'MS2 quantification': 1, 'Reduce noise': 1, 'Heavy labels': 'K:0C2N, R:0C2N', 'Peaks in isotope clusters': 3, 'Isolation window size': 3.0, 'MS1 quantification': 0, 'IAA': 1}
    >>> peptideSettings = massCalculator(isolationListPath, settings)
    >>> indexedData = {'TPSAAYLWVGTGASEAEK++': {'MS2': {23.150459: {'y14 l0+': 4964.76123046875, 'y9 l0+': 21054.51953125, 'y13 l1+': 2813.41748046875, 'y11 l1+': 7185.19482421875, 'y12 l0+': 13384.2255859375, 'y13 l0+': 5823.703125, 'y10 l1+': 2935.1923828125, 'y11 l0+': 23552.212890625, 'y10 l0+': 13887.4130859375, 'y7 l0+': 5180.93994140625}, 23.420364: {'b4 h0+': 11028.171875, 'b2 h0+': 5132.03173828125, 'b7 h0+': 11067.611328125, 'b5 h0+': 9854.640625, 'b3 h0+': 5154.6748046875, 'b6 h0+': 11239.2158203125}, 22.632284: {'y9 l0+': 84794.0234375, 'y17 l2++': 11460.509765625, 'y8 l0+': 13237.37890625, 'y14 l1+': 10147.6396484375, 'y12 l0+': 45556.046875, 'y11 l1+': 27692.677734375, 'y10 l1+': 7963.7724609375, 'y16 l0+': 7039.541015625, 'y7 l0+': 13446.1142578125, 'y15 l0+': 6271.62744140625, 'y3 l0+': 6333.60498046875, 'y17 l1++': 26408.1875, 'y17 l0++': 7396.560546875, 'y13 l1+': 12261.728515625, 'y11 l0+': 90954.171875, 'y13 l0+': 42155.796875, 'y10 l0+': 51414.83203125, 'y9 l1+': 11411.6845703125, 'y12 l1+': 18093.998046875, 'y17 l1+': 10729.3046875}, 23.889042: {'b4 h0+': 2865.9638671875, 'b7 h0+': 7352.310546875, 'b5 h0+': 8892.93359375, 'b6 h0+': 5066.56689453125, 'b2 h0+': 6127.92138671875}, 22.915088: {'b4 h0+': 12055.998046875, 'b8 h0+': 8467.876953125, 'b2 h0+': 11455.8271484375, 'b7 h0+': 21357.015625, 'b9 h0+': 12887.126953125, 'b5 h0+': 23561.99609375, 'b3 h0+': 6048.7216796875, 'b6 h0+': 15421.2822265625}, 23.284927: {'y14 l0+': 6012.4990234375, 'y9 l0+': 19583.33984375, 'y17 l1++': 31975.744140625, 'y11 l1+': 5056.68994140625, 'y11 l0+': 20868.37890625, 'y12 l0+': 11190.357421875, 'y10 l0+': 11808.947265625, 'y17 l2++': 13588.5869140625}, 23.195355: {'y14 l0+': 6241.0634765625, 'y9 l0+': 15892.2119140625, 'y11 l1+': 10060.306640625, 'y11 l0+': 21003.5390625, 'y12 l0+': 10591.505859375, 'y13 l0+': 10002.1162109375, 'y10 l0+': 15422.37890625}, 22.517634: {'y14 l0+': 49312.8515625, 'y9 l0+': 205956.5625, 'y5 l0+': 14758.0400390625, 'y14 l1+': 28909.16015625, 'y8 l1+': 6242.47021484375, 'y9 l1+': 35926.0703125, 'y2 l0+': 14592.6103515625, 'y13 l1+': 47572.76953125, 'y17 l1++': 13423.859375, 'y11 l1+': 75801.0234375, 'y11 l0+': 259289.984375, 'y3 l0+': 16466.33984375, 'y10 l0+': 149662.28125, 'y15 l1+': 8733.6591796875, 'y12 l1+': 42775.32421875, 'y12 l0+': 144133.953125, 'y6 l0+': 8143.8134765625, 'y8 l0+': 35570.84375, 'y10 l1+': 32995.4921875, 'y16 l0+': 25947.8984375, 'y4 l0+': 7086.61279296875, 'y15 l0+': 22941.091796875, 'y7 l0+': 38482.734375, 'y17 l0++': 7454.48095703125, 'y13 l0+': 119084.1640625, 'y16 l1+': 13026.826171875}, 23.197613: {'b4 h0+': 7967.2509765625, 'b8 h0+': 7785.8525390625, 'b2 h0+': 6172.7578125, 'b7 h0+': 4899.875, 'b9 h0+': 3009.90869140625, 'b5 h0+': 14862.6494140625, 'b3 h0+': 2668.04345703125, 'b6 h0+': 8473.0244140625}, 22.912815: {'y14 l0+': 12442.6083984375, 'y9 l0+': 44816.03125, 'y8 l0+': 5696.72021484375, 'y14 l1+': 6037.0625, 'y7 l0+': 6571.740234375, 'y12 l0+': 28853.26953125, 'y9 l1+': 6295.20654296875, 'y15 l0+': 5574.16552734375, 'y13 l1+': 8991.599609375, 'y17 l0++': 5505.9228515625, 'y11 l1+': 14385.53515625, 'y11 l0+': 46270.0703125, 'y13 l0+': 17086.8125, 'y10 l0+': 25284.064453125, 'y12 l1+': 7227.36572265625}, 23.922808: {'b8 h0+': 3148.598388671875, 'b2 h0+': 3217.740234375, 'b5 h0+': 8936.5732421875, 'b7 h0+': 3118.074951171875, 'b3 h0+': 5894.84375, 'b6 h0+': 8619.8720703125}, 23.472161: {'b4 h0+': 10823.595703125, 'b6 h0+': 8009.04736328125, 'b3 h0+': 6703.85107421875, 'b7 h0+': 7173.52099609375, 'b5 h0+': 11060.873046875}, 22.962327: {'b4 h0+': 11295.0341796875, 'b8 h0+': 9312.7626953125, 'b2 h0+': 7751.54833984375, 'b7 h0+': 11217.5927734375, 'b9 h0+': 13596.5869140625, 'b5 h0+': 16673.611328125, 'b3 h0+': 8247.220703125, 'b6 h0+': 18409.19140625}, 23.062664: {'y14 l0+': 8159.6533203125, 'y9 l0+': 18917.41796875, 'y8 l0+': 5065.6865234375, 'y14 l1+': 5232.32958984375, 'y12 l0+': 20003.484375, 'y10 l1+': 7220.01953125, 'y13 l1+': 3030.3828125, 'y11 l1+': 11355.0673828125, 'y11 l0+': 33512.81640625, 'y13 l0+': 13826.0419921875, 'y10 l0+': 13046.048828125, 'y12 l1+': 4509.11376953125}, 23.23813: {'y14 l0+': 5392.8955078125, 'y9 l0+': 15908.3515625, 'y17 l1++': 5362.3564453125, 'y11 l1+': 6344.01416015625, 'y11 l0+': 23782.505859375, 'y12 l0+': 10735.9794921875, 'y13 l0+': 9472.232421875, 'y10 l0+': 11835.2392578125}, 22.862694: {'y14 l0+': 11541.8388671875, 'y9 l0+': 40875.80859375, 'y8 l0+': 5375.55029296875, 'y12 l0+': 24935.173828125, 'y9 l1+': 10330.8115234375, 'y7 l0+': 6482.78076171875, 'y13 l1+': 9712.0673828125, 'y11 l1+': 17735.158203125, 'y11 l0+': 40300.0625, 'y13 l0+': 20958.33203125, 'y10 l0+': 28688.8671875, 'y12 l1+': 10139.439453125}, 22.574527: {'b5 h1+': 6159.2978515625, 'b7 h1+': 10774.0693359375, 'b6 h1+': 8703.978515625, 'b5 h0+': 80379.65625, 'b9 h0+': 35024.56640625, 'b7 h0+': 65913.53125, 'b4 h0+': 47684.35546875, 'b8 h0+': 35538.33203125, 'b3 h0+': 13431.662109375, 'b2 h0+': 31927.875, 'b9 h1+': 12908.052734375, 'b8 h1+': 6959.7705078125, 'b10 h0+': 4761.060546875, 'b6 h0+': 63492.921875}, 23.016962: {'y14 l0+': 6572.62158203125, 'y9 l0+': 32253.7578125, 'y13 l1+': 5991.3173828125, 'y11 l1+': 12466.83984375, 'y11 l0+': 37585.4921875, 'y12 l0+': 23724.640625, 'y13 l0+': 18536.603515625, 'y9 l1+': 3027.098876953125, 'y10 l0+': 20308.10546875, 'y7 l0+': 6912.35302734375, 'y12 l1+': 6919.56298828125}, 23.990995: {'y9 l0+': 11763.4892578125, 'y13 l1+': 2819.267822265625, 'y11 l0+': 16853.787109375, 'y12 l0+': 7007.22509765625, 'y13 l0+': 9300.4833984375, 'y10 l1+': 2629.817626953125, 'y10 l0+': 8661.7646484375, 'y12 l1+': 2946.5771484375}, 23.959487: {'b8 h0+': 2778.43994140625, 'b6 h0+': 2697.570556640625, 'b9 h0+': 5105.14013671875, 'b5 h0+': 6353.56494140625}, 23.107711: {'b4 h0+': 5596.6015625, 'b2 h0+': 6000.27001953125, 'b7 h0+': 8224.439453125, 'b9 h0+': 6419.3876953125, 'b5 h0+': 13403.9677734375, 'b6 h0+': 10878.9716796875}, 22.864953: {'b4 h0+': 10941.5888671875, 'b8 h0+': 11116.384765625, 'b2 h0+': 9087.6044921875, 'b7 h0+': 19688.0234375, 'b9 h0+': 10193.02734375, 'b5 h0+': 22120.232421875, 'b3 h0+': 4873.2568359375, 'b6 h0+': 14715.326171875}, 23.064924: {'b4 h0+': 10935.0234375, 'b8 h0+': 4039.529052734375, 'b2 h0+': 7988.7666015625, 'b7 h0+': 13121.5361328125, 'b9 h0+': 6453.25830078125, 'b5 h0+': 11083.1962890625, 'b6 h0+': 13037.7841796875}, 23.152718: {'b4 h0+': 6869.9111328125, 'b8 h0+': 7322.46142578125, 'b2 h0+': 6516.04931640625, 'b7 h0+': 8234.517578125, 'b9 h0+': 5954.47802734375, 'b5 h0+': 13373.0390625, 'b6 h0+': 8087.3994140625}, 23.327706: {'y9 l0+': 20284.537109375, 'y17 l1++': 34975.5625, 'y11 l1+': 6395.61572265625, 'y11 l0+': 22530.146484375, 'y12 l0+': 8449.8994140625, 'y13 l0+': 9690.8466796875, 'y10 l0+': 10947.8740234375, 'y17 l2++': 22776.8828125, 'y12 l1+': 7211.3759765625, 'y17 l1+': 8316.8056640625}, 23.019225: {'b4 h0+': 11961.2138671875, 'b8 h0+': 8788.4873046875, 'b2 h0+': 7538.65869140625, 'b7 h0+': 13907.5263671875, 'b9 h0+': 10372.3486328125, 'b5 h0+': 16113.87109375, 'b6 h0+': 14937.333984375}, 23.957226: {'y14 l0+': 2809.75341796875, 'y12 l0+': 9980.4921875, 'y9 l0+': 13567.1630859375, 'y13 l0+': 9119.26171875, 'y11 l0+': 15385.4248046875, 'y10 l0+': 7233.4287109375}, 23.329964: {'b4 h0+': 6373.9130859375, 'b8 h0+': 5655.77490234375, 'b7 h0+': 5740.88330078125, 'b5 h0+': 10147.6884765625, 'b3 h0+': 6264.6962890625, 'b6 h0+': 11031.962890625}, 23.240388: {'b4 h0+': 5602.08984375, 'b7 h0+': 8834.6865234375, 'b5 h0+': 11086.3310546875, 'b6 h0+': 8658.94921875, 'b2 h0+': 5011.15673828125}, 22.960066: {'y14 l0+': 10134.4189453125, 'y9 l0+': 34771.359375, 'y8 l0+': 7413.35791015625, 'y14 l1+': 3108.365478515625, 'y12 l0+': 26661.80078125, 'y9 l1+': 7776.69482421875, 'y16 l0+': 5923.12255859375, 'y7 l0+': 4948.7265625, 'y13 l1+': 9124.892578125, 'y11 l1+': 14329.333984375, 'y11 l0+': 44540.1796875, 'y13 l0+': 22150.560546875, 'y10 l0+': 20406.873046875, 'y12 l1+': 6211.6572265625}, 22.572267: {'y14 l0+': 36180.88671875, 'y9 l0+': 146540.171875, 'y5 l0+': 12797.978515625, 'y14 l1+': 15991.26953125, 'y9 l1+': 26751.947265625, 'y2 l0+': 7371.0712890625, 'y3 l0+': 16941.630859375, 'y13 l1+': 32177.794921875, 'y17 l1++': 13839.943359375, 'y11 l1+': 57276.640625, 'y11 l0+': 177767.28125, 'y4 l0+': 7410.94287109375, 'y10 l0+': 100166.1953125, 'y15 l1+': 4727.4140625, 'y12 l1+': 34872.67578125, 'y12 l0+': 91897.796875, 'y6 l0+': 5441.56201171875, 'y8 l0+': 20967.11328125, 'y10 l1+': 19234.068359375, 'y16 l0+': 18957.765625, 'y15 l0+': 16724.29296875, 'y7 l0+': 22175.62890625, 'y17 l0++': 8972.064453125, 'y13 l0+': 72237.5, 'y16 l1+': 7879.26513671875}, 23.371637: {'y9 l0+': 19239.091796875, 'y17 l2++': 32082.197265625, 'y11 l0+': 24289.78125, 'y12 l0+': 10206.919921875, 'y13 l0+': 10370.1533203125, 'y10 l0+': 14362.076171875, 'y17 l1++': 60461.6171875, 'y17 l1+': 9182.1396484375}, 22.634544: {'b5 h1+': 5663.4833984375, 'b7 h1+': 6386.38427734375, 'b6 h1+': 6486.1396484375, 'b5 h0+': 56455.984375, 'b9 h0+': 25551.291015625, 'b7 h0+': 40900.96875, 'b4 h0+': 28491.94140625, 'b8 h0+': 21744.76171875, 'b3 h0+': 6724.2216796875, 'b2 h0+': 23700.21875, 'b9 h1+': 5946.521484375, 'b8 h1+': 8667.509765625, 'b6 h0+': 39456.0234375}, 23.287187: {'b4 h0+': 7933.375, 'b2 h0+': 6749.25390625, 'b7 h0+': 9459.8505859375, 'b9 h0+': 6715.56982421875, 'b5 h0+': 14028.0078125, 'b6 h0+': 9750.0732421875}, 23.105453: {'y14 l0+': 5184.09912109375, 'y9 l0+': 22581.68359375, 'y8 l0+': 2804.0234375, 'y12 l0+': 13586.5693359375, 'y9 l1+': 4621.416015625, 'y16 l0+': 3031.02978515625, 'y7 l0+': 4784.71240234375, 'y13 l1+': 6763.78125, 'y11 l1+': 9236.150390625, 'y11 l0+': 32088.423828125, 'y13 l0+': 12844.7548828125, 'y10 l0+': 15707.26953125, 'y12 l1+': 6545.6337890625}, 22.519892: {'b5 h1+': 8510.1044921875, 'b7 h1+': 18370.86328125, 'b6 h1+': 10793.5341796875, 'b5 h0+': 118880.828125, 'b9 h0+': 59258.390625, 'b7 h0+': 104845.0625, 'b4 h0+': 55632.046875, 'b8 h0+': 61762.14453125, 'b3 h0+': 22855.349609375, 'y11 l1+': 7322.544921875, 'b2 h0+': 45708.26171875, 'b9 h1+': 15506.720703125, 'b8 h1+': 16203.345703125, 'b10 h0+': 10781.091796875, 'b6 h0+': 103506.1640625}, 23.993255: {'b4 h0+': 4893.1474609375, 'b9 h0+': 4833.73046875, 'b5 h0+': 8232.1875, 'b6 h0+': 8700.1533203125, 'b2 h0+': 5412.828125}}, 'MS1': {}}, 'SSEDPNEDIVER++': {'MS2': {11.379198: {'y9 l0+': 551251.75, 'y9 l0++': 225360.890625, 'y8 l1+': 347870.46875, 'y8 l0++': 1093021.25, 'y9 l1+': 112770.1640625, 'y10 l1+': 48113.69921875, 'y2 l0+': 156787.390625, 'y3 l0+': 244145.1875, 'y7 l0+': 180803.078125, 'y8 l0+': 2140608.5, 'y5 l0+': 254384.046875, 'y4 l0+': 100115.3671875, 'y6 l0+': 146867.296875, 'y10 l0+': 153993.21875, 'y8 l1++': 153571.3125}, 11.117339: {'y9 l0+': 311915.0, 'y5 l0+': 137951.359375, 'y8 l1+': 216298.59375, 'y5 l1+': 19669.083984375, 'y9 l1+': 76896.8125, 'y9 l0++': 114249.2421875, 'y2 l0+': 89602.5703125, 'y3 l1+': 7290.69482421875, 'y11 l0++': 16931.349609375, 'y3 l0+': 132501.796875, 'y6 l0+': 80285.890625, 'y4 l1+': 9733.4521484375, 'y10 l0+': 76138.6875, 'y8 l0+': 1062837.125, 'y8 l0++': 542676.25, 'y10 l1+': 20789.013671875, 'y9 l1++': 22910.54296875, 'y4 l0+': 77265.4140625, 'y10 l0++': 21695.13671875, 'y7 l1+': 16529.787109375, 'y7 l0+': 112596.7109375, 'y6 l1+': 13464.0322265625, 'y8 l1++': 102424.2578125}, 12.055869: {'y5 l2+': 4293.802734375, 'y6 l0+': 16104.90625, 'y6 l1+': 12115.2119140625, 'y6 l2+': 5125.267578125}, 11.211154: {'y10 l0++': 112025.734375, 'y9 l0+': 1526251.5, 'y8 l0+': 5473128.5, 'y8 l1+': 1068542.875, 'y5 l1+': 74474.7734375, 'y8 l0++': 2696013.25, 'y9 l1+': 323523.5, 'y9 l0++': 572964.125, 'y2 l0+': 488009.59375, 'y9 l1++': 127940.8203125, 'y3 l0+': 616830.4375, 'y7 l1+': 107917.4375, 'y7 l0+': 558316.875, 'y5 l0+': 662936.5625, 'y4 l0+': 396152.21875, 'y8 l1++': 560464.375, 'y6 l0+': 367222.25, 'y10 l0+': 350779.125, 'y10 l1+': 109015.84375}, 12.088127: {'y6 l0+': 6869.287109375}, 11.300961: {'b4 h0+': 1830040.25, 'b9 h0+': 167595.078125, 'b7 h0+': 229160.890625, 'b3 h0+': 610619.75, 'b2 h0+': 1859054.5}, 11.119583: {'b4 h0+': 551865.0625, 'b8 h0+': 24329.0390625, 'b4 h1+': 44379.51171875, 'b2 h0+': 541848.8125, 'b5 h0+': 40053.2109375, 'b10 h0+': 22903.119140625, 'b9 h0+': 48810.7109375, 'b7 h0+': 52218.265625, 'b3 h0+': 146122.203125}, 11.412908: {'y9 l0+': 218619.734375, 'y9 l0++': 79874.25, 'y8 l1+': 150948.03125, 'y8 l0++': 433738.15625, 'y9 l1+': 60482.359375, 'y10 l1+': 21362.267578125, 'y2 l0+': 74596.8203125, 'y9 l1++': 16253.6396484375, 'y3 l0+': 102713.6484375, 'y7 l0+': 85010.3671875, 'y8 l0+': 859961.6875, 'y5 l0+': 130139.8515625, 'y4 l0+': 40676.578125, 'y6 l0+': 61348.11328125, 'y10 l0+': 52391.05859375, 'y8 l1++': 71075.125}, 11.449535: {'y9 l0+': 73113.21875, 'y9 l0++': 24009.59375, 'y8 l1+': 41088.0078125, 'y8 l0++': 123902.71875, 'y9 l1++': 5729.8525390625, 'y9 l1+': 17870.3984375, 'y10 l1+': 5078.1298828125, 'y2 l0+': 14070.1904296875, 'y10 l0++': 4042.301025390625, 'y3 l0+': 29908.85546875, 'y7 l0+': 25400.953125, 'y8 l0+': 260240.515625, 'y5 l0+': 31988.31640625, 'y4 l0+': 16443.572265625, 'y6 l0+': 15670.3837890625, 'y10 l0+': 17220.779296875, 'y8 l1++': 17339.490234375}, 11.074094: {'b4 h0+': 166195.28125, 'b8 h0+': 6907.57421875, 'b4 h1+': 11513.2587890625, 'b2 h0+': 144453.03125, 'b7 h0+': 14693.427734375, 'b10 h0+': 5483.384765625, 'b9 h0+': 12589.818359375, 'b5 h0+': 6380.4892578125, 'b3 h0+': 38007.42578125, 'b6 h0+': 5866.19189453125}, 11.253128: {'y10 l0++': 139242.75, 'y9 l0+': 1804861.25, 'y8 l0+': 5923565.5, 'y9 l1+': 417348.0, 'y8 l1+': 1119235.125, 'y5 l1+': 62852.2265625, 'y8 l0++': 2900906.25, 'y10 l1+': 84322.15625, 'y9 l0++': 639199.0, 'y2 l0+': 452853.25, 'y9 l1++': 126859.9375, 'y3 l0+': 658765.5625, 'y7 l1+': 105424.5234375, 'y7 l0+': 655899.25, 'y11 l0++': 80611.6953125, 'y5 l0+': 686430.125, 'y4 l0+': 360982.5625, 'y6 l0+': 493947.03125, 'y10 l0+': 423678.6875, 'y8 l1++': 440412.4375}, 11.16295: {'y9 l0+': 874120.3125, 'y5 l0+': 367315.625, 'y8 l1+': 524231.75, 'y5 l1+': 57724.15625, 'y9 l1+': 207176.3125, 'y9 l0++': 285075.40625, 'y2 l0+': 227409.015625, 'y3 l0+': 345788.75, 'y11 l0++': 32679.951171875, 'y10 l1++': 29967.9140625, 'y4 l0+': 233300.3125, 'y6 l0+': 259057.078125, 'y10 l0+': 225258.96875, 'y8 l0+': 3171879.75, 'y8 l0++': 1556801.875, 'y8 l1++': 331553.9375, 'y9 l1++': 49397.59765625, 'y7 l0+': 384171.65625, 'y7 l1+': 60178.4765625, 'y10 l1+': 62443.5859375, 'y6 l1+': 39386.203125, 'y10 l0++': 40894.65625}, 11.341432: {'y10 l0++': 89828.375, 'y9 l0+': 1286164.125, 'y8 l0+': 4407595.5, 'y8 l1+': 852765.125, 'y5 l1+': 72621.296875, 'y8 l0++': 1889971.75, 'y9 l1+': 314136.71875, 'y9 l0++': 388042.75, 'y2 l0+': 333922.0, 'y9 l1++': 119503.28125, 'y3 l0+': 557429.25, 'y7 l1+': 70156.4921875, 'y7 l0+': 465385.90625, 'y5 l0+': 535408.5625, 'y4 l0+': 315410.0625, 'y8 l1++': 444176.0625, 'y6 l0+': 312849.6875, 'y10 l0+': 334220.84375, 'y10 l1+': 80225.2578125}, 11.485491: {'b4 h0+': 17331.3984375}, 12.125957: {'y6 l0+': 2647.498779296875}, 11.255374: {'b4 h0+': 1772873.25, 'b7 h0+': 188731.28125, 'b4 h1+': 142172.375, 'b9 h0+': 130897.7578125, 'b2 h0+': 1844218.375, 'b3 h0+': 454737.28125}, 11.451781: {'b4 h0+': 65468.67578125, 'b9 h0+': 6057.63916015625, 'b7 h0+': 6582.69482421875, 'b3 h0+': 14493.212890625, 'b2 h0+': 59696.7578125}, 11.298715: {'y9 l0+': 1495208.25, 'y8 l0+': 4956155.0, 'y8 l1+': 930318.375, 'y8 l0++': 2376688.0, 'y8 l1++': 435021.21875, 'y9 l0++': 578192.8125, 'y4 l0+': 313234.90625, 'y2 l0+': 406848.25, 'y9 l1++': 106463.4375, 'y7 l0+': 537282.875, 'y5 l0+': 701582.625, 'y6 l0+': 384725.53125, 'y3 l0+': 600752.5, 'y10 l0+': 369086.0625, 'y9 l1+': 241981.8125}, 12.238222: {'y5 l2+': 2461.18798828125}, 11.415154: {'b4 h0+': 221661.078125, 'b4 h1+': 15395.2685546875, 'b7 h0+': 17125.544921875, 'b10 h0+': 11580.140625, 'b9 h0+': 21418.255859375, 'b2 h0+': 208930.84375, 'b3 h0+': 59172.32421875}, 11.343677: {'b4 h0+': 1265458.0, 'b9 h0+': 103738.6328125, 'b7 h0+': 76802.3125, 'b3 h0+': 256043.796875, 'b2 h0+': 1140142.5}, 11.07185: {'y10 l0++': 7779.19189453125, 'y9 l0+': 114279.8671875, 'y8 l0+': 384373.28125, 'y8 l1+': 76235.625, 'y5 l1+': 9171.142578125, 'y8 l0++': 173647.6875, 'y9 l1+': 25120.939453125, 'y9 l0++': 36532.265625, 'y2 l0+': 35457.375, 'y9 l1++': 8283.068359375, 'y3 l0+': 40706.44140625, 'y7 l1+': 6975.08056640625, 'y7 l0+': 41705.859375, 'y5 l0+': 44677.16015625, 'y4 l0+': 27941.193359375, 'y8 l1++': 32993.16015625, 'y6 l0+': 30231.5390625, 'y10 l0+': 28970.884765625, 'y10 l1+': 7597.90673828125}, 11.483245: {'y9 l0+': 14483.6337890625, 'y7 l0+': 6021.5869140625, 'y5 l0+': 8805.697265625, 'y8 l0+': 61681.25, 'y8 l1+': 8524.6650390625, 'y6 l0+': 6499.59765625, 'y8 l0++': 27551.541015625, 'y3 l0+': 8133.1064453125, 'y9 l0++': 6951.86572265625, 'y2 l0+': 6699.99267578125}, 11.381444: {'b4 h0+': 615489.75, 'b7 h0+': 57737.52734375, 'b3 h0+': 185798.90625, 'b2 h0+': 680677.25}, 11.165195: {'b4 h0+': 1197730.125, 'b8 h0+': 61509.46875, 'b2 h0+': 1140154.0, 'b7 h0+': 103099.953125, 'b4 h1+': 95105.2734375, 'b9 h0+': 105129.515625, 'b5 h0+': 66890.4140625, 'b3 h0+': 287312.34375, 'b8 h1++': 49301.5, 'b6 h0+': 51303.02734375}, 11.213399: {'b4 h0+': 2016403.25, 'b8 h0+': 105794.109375, 'b7 h0+': 161939.375, 'b4 h1+': 170504.40625, 'b9 h0+': 167960.234375, 'b2 h0+': 2015227.25, 'b3 h0+': 555660.9375}}, 'MS1': {}}, 'SWPAVGNCSSALR++': {'MS2': {}, 'MS1': {}}, 'TVAACNLPIVR++': {'MS2': {11.268874: {'y9 l1++': 5103.326171875}}, 'MS1': {}}, 'FNAVLTNPQGDYDTSTGK++': {'MS2': {18.791707: {'y12 l2+': 8147.03173828125}, 18.318366: {'b4 h0+': 48093.84375, 'b2 h0+': 26928.529296875, 'b7 h0+': 19682.630859375, 'b4 h1+': 6417.17529296875, 'b5 h0+': 23917.0625, 'b3 h0+': 74380.234375, 'b6 h0+': 16948.958984375}, 18.210013: {'b5 h1+': 12718.3515625, 'b7 h1+': 27754.482421875, 'b2 h1+': 5959.50048828125, 'b5 h0+': 110587.140625, 'b4 h1+': 20573.3125, 'b9 h0+': 12486.498046875, 'b7 h0+': 110452.8046875, 'b16 h0+': 7423.009765625, 'b4 h0+': 211545.390625, 'b3 h1+': 19864.837890625, 'b6 h1+': 10887.5439453125, 'b11 h0+': 9223.1767578125, 'b2 h0+': 127055.4921875, 'b10 h0+': 6512.29638671875, 'b3 h0+': 344427.03125, 'b6 h0+': 73014.140625}, 18.147784: {'b5 h1+': 13464.572265625, 'b13 h0+': 9124.4658203125, 'b12 h0+': 5786.0166015625, 'b7 h1+': 16535.955078125, 'b6 h1+': 7304.94140625, 'b8 h0+': 9556.7587890625, 'b5 h0+': 80863.2734375, 'b4 h1+': 13812.90625, 'b9 h0+': 12665.7578125, 'b7 h0+': 84660.265625, 'b16 h0+': 7285.57568359375, 'b4 h0+': 146058.46875, 'b3 h1+': 19924.55859375, 'b11 h0+': 6520.26904296875, 'b2 h0+': 102005.3125, 'b3 h0+': 263760.09375, 'b6 h0+': 57563.52734375}, 18.372982: {'b3 h0+': 8359.158203125}, 18.757932: {'y12 l1++': 9515.8173828125}, 18.261473: {'b5 h1+': 10177.220703125, 'b7 h1+': 11958.177734375, 'b6 h1+': 5255.111328125, 'b8 h0+': 8778.5751953125, 'b5 h0+': 74141.3125, 'b4 h1+': 11947.8125, 'b9 h0+': 10170.708984375, 'b7 h0+': 72125.2421875, 'b14 h0+': 5203.4638671875, 'b4 h0+': 132758.421875, 'b3 h1+': 13435.275390625, 'b11 h0+': 6786.361328125, 'b2 h0+': 83702.015625, 'b10 h0+': 9650.89453125, 'b3 h0+': 229904.859375, 'b6 h0+': 46217.296875}, 18.082757: {'b4 h0+': 60102.4453125, 'b3 h1+': 8483.3251953125, 'b7 h1+': 5952.25537109375, 'b2 h0+': 41776.90234375, 'b7 h0+': 31046.83984375, 'b4 h1+': 6424.603515625, 'b5 h0+': 29249.93359375, 'b3 h0+': 106744.28125, 'b6 h0+': 26541.482421875}}, 'MS1': {}}}
    >>> compLib = create_compensationLibrary(peptideSettings, settings)
    A bunch of text...
    >>> CC = compLib['WSAGLTSSQVDLYIPK++'].compensationConstants
    >>> ref = {'y2 l0+': 0.46176149443673686, 'y15 l2+': 1.166054291110807, 'y10 h1+': 1.1620095718793528, 'y6 l0++': 0.6171945813850227, 'y5 l1++': 1.5111541287856987, 'y8 l1++': 1.2258693175888973, 'y10 h1++': 1.1619099079800717, 'y5 h2++': 3.700882712316675, 'y10 h0++': 0.7429454656378209, 'y10 h0+': 0.7428703115653599, 'y3 l2+': 9.151867820369574, 'y4 l1++': 1.7350786324028207, 'y4 h0++': 0.548175660837329, 'y16 h0+': 0.9999087006639763, 'y6 l0+': 0.617128640620502, 'y11 l0+': 0.7770038085846145, 'y12 l0++': 0.825935581706219, 'y3 l0+': 0.4954405154486375, 'y6 h1++': 1.418703947389558, 'y7 h0++': 0.6519345310197261, 'y5 h0++': 0.5867583073634474, 'y10 l1++': 1.1577159453850017, 'y12 h0+': 0.8255191987484208, 'y2 l2++': 16.51910676448536, 'y12 h2++': 1.3713321527952642, 'y5 h1+': 1.5280502780335168, 'y8 l2+': 2.056857513208291, 'y10 h2++': 1.7119182586899901, 'y12 l0+': 0.8258550333742083, 'y3 h1+': 2.423121522502644, 'y9 h0+': 0.7171018187450032, 'y16 l1++': 1.0, 'y5 h1++': 1.5277406761512273, 'y12 l1++': 1.0803175972224253, 'y13 h0++': 0.8447644496231639, 'y16 l2+': 1.000124767477293, 'y2 l0++': 0.4618139357380837, 'y14 l0+': 0.8723534459414264, 'y14 h0+': 0.8721011516555568, 'y13 l2+': 1.3084550748577444, 'y16 h2+': 1.0001259138541385, 'y7 l2+': 2.4502665447203626, 'y2 h0+': 0.46110775292108774, 'y11 l2++': 1.5387891810074483, 'y2 h1++': 3.5105099593197857, 'y8 l0+': 0.6924386380890271, 'y2 h2++': 17.399686369231446, 'y14 l2++': 1.2358254767633239, 'y4 h1++': 1.7619069400412137, 'y13 h2++': 1.3118178168458121, 'y13 l0+': 0.8449842227471464, 'y3 l1+': 2.3571538997252213, 'y11 h0+': 0.7765918390869424, 'y14 l0++': 0.8724369118001917, 'y15 h0+': 0.9011892559197878, 'y7 h2++': 2.476989966061125, 'y7 l1+': 1.3055484835644777, 'y7 l2++': 2.449532009863393, 'y14 l2+': 1.2360207525186127, 'y13 h0+': 0.8446825633533509, 'y11 l1++': 1.1227272431598396, 'y11 l0++': 0.7770811097115982, 'y16 h2++': 1.0, 'y8 h0+': 0.6919003337643967, 'y14 h1+': 1.0530584393222955, 'y12 h0++': 0.8255998747605274, 'y15 l0+': 0.901383667605707, 'y2 l2+': 16.534824359574213, 'y15 l0++': 0.901468865341366, 'y16 h0++': 1.0, 'y15 l1++': 1.038338121842069, 'y4 l1+': 1.7355383638380772, 'y9 h1+': 1.1943849013506294, 'y4 l0++': 0.5488355366811353, 'y6 h2++': 2.9676195237065204, 'y6 l2+': 2.927797227049012, 'y6 h1+': 1.4189423352846866, 'y8 h1++': 1.232121775497544, 'y14 h1++': 1.0530074314084268, 'y2 h2+': 17.416442579372177, 'y12 l2++': 1.3669003388498975, 'y4 l0+': 0.5487750929625518, 'y3 l2++': 9.14523133779669, 'y9 h1++': 1.1942694365557887, 'y16 h1++': 1.0, 'y5 h0+': 0.5866945866310224, 'y8 l0++': 0.6925102326020012, 'y2 l1+': 3.35113424816751, 'y14 l1++': 1.051668853575307, 'y2 l1++': 3.348632196532476, 'y11 h2++': 1.545819402024772, 'y3 h1++': 2.4219765166993743, 'y7 h0+': 0.6518657952764503, 'y13 l1+': 1.067927412654679, 'y13 l1++': 1.0678706455517069, 'y6 h0+': 0.6165143574905125, 'y9 l1++': 1.189145535656562, 'y12 h1+': 1.0824735748329433, 'y15 l1+': 1.0383818593875644, 'y15 h1++': 1.0393124941461234, 'y5 l1+': 1.5114515049069062, 'y2 h1+': 3.5133074747881725, 'y13 l0++': 0.8450659743508699, 'y4 h2++': 5.022925299110292, 'y5 l2+': 3.6355764566313304, 'y12 h1++': 1.0824097276958708, 'y8 l2++': 2.056325430750944, 'y11 h0++': 0.7766692490412953, 'y4 l2++': 4.904387422114285, 'y8 h2++': 2.073940881566516, 'y8 l1+': 1.2260000105334004, 'y8 h1+': 1.232256399953447, 'y9 l1+': 1.1892577765424954, 'y10 l2+': 1.7023328161353257, 'y13 l2++': 1.3082356411902925, 'y9 h2+': 1.8756990744266364, 'y15 h2++': 1.1675978378705498, 'y9 h2++': 1.8752514175450095, 'y6 h0++': 0.6165803411260465, 'y15 l2++': 1.1658818730493687, 'y6 l2++': 2.926794900142675, 'y5 l0+': 0.58733807039478, 'y10 l0++': 0.7434095056185896, 'y5 l2++': 3.634083666156769, 'y13 h1+': 1.0696890695178012, 'y7 l0+': 0.6524498461770799, 'y4 h2+': 5.025482124857631, 'y9 l2++': 1.8620369898445046, 'y16 l1+': 1.0000275101647744, 'y14 l1+': 1.0517186214177958, 'y10 l1+': 1.1578129317489276, 'y16 l2++': 1.0, 'y7 l0++': 0.6525185231632991, 'y10 l0+': 0.7433344473518282, 'y13 h1++': 1.069630874630699, 'y3 l0++': 0.4954962039550111, 'y9 h0++': 0.7171752308855844, 'y10 h2+': 1.7122929731735292, 'y6 l1+': 1.4065606740196475, 'y3 h2++': 9.500546088279446, 'y14 h2+': 1.2386406546172664, 'y15 h0++': 0.9012746083291993, 'y6 l1++': 1.4063307611307192, 'y2 h0++': 0.46116015871783256, 'y5 l0++': 0.5874017613183902, 'y7 h1+': 1.3143694273423998, 'y4 h0+': 0.5481152061626577, 'y9 l2+': 1.8624761963461218, 'y3 h0++': 0.49483049339314383, 'y7 h1++': 1.3141913186145553, 'y10 l2++': 1.7019645002291486, 'y7 h2+': 2.477742954786455, 'y14 h0++': 0.8721847621330884, 'y5 h2+': 3.70242836303701, 'y9 l0+': 0.7176046752755841, 'y11 h2+': 1.5461263291411744, 'y7 l1++': 1.3053760716530354, 'y3 l1++': 2.3560892027943665, 'y8 h0++': 0.6919720039730978, 'y3 h0+': 0.4947748215386456, 'y11 h1++': 1.1259347698930207, 'y15 h2+': 1.167772188011228, 'y4 h1+': 1.7623896454917924, 'y11 h1+': 1.1260176479980302, 'y11 l1+': 1.1228079833164162, 'y14 h2++': 1.238442994606226, 'y11 l2+': 1.5390914106640485, 'y12 h2+': 1.371575535133452, 'y3 h2+': 9.50757334379517, 'y8 h2+': 2.0744843804750484, 'y12 l1+': 1.0803798620388685, 'y13 h2+': 1.3120401228745875, 'y16 l0++': 1.0, 'y6 h2+': 2.9686504068725625, 'y16 h1+': 1.0000282219065075, 'y4 l2+': 4.906840320355021, 'y16 l0+': 0.9999088896652855, 'y9 l0++': 0.7176780016654519, 'y12 l2+': 1.36714040107681, 'y15 h1+': 1.0393573166829606}
    >>> all([str(CC[key])[:10]==str(ref[key])[:10] for key in CC])
    True
    >>> HI = compLib['WSAGLTSSQVDLYIPK++'].heavyIsolatedIsoforms
    >>> ref = [{'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 0, 'H[2]': 0, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 1, 'S[33]': 0, 'N[15]': 0, 'S[32]': -1, 'O[17]': 0, 'H[2]': 0, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 1, 'N[15]': 0, 'S[32]': -1, 'O[17]': 0, 'H[2]': 0, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 2, 'N[15]': 0, 'S[32]': -2, 'O[17]': 0, 'H[2]': 0, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 1, 'O[16]': -1, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 0, 'H[2]': 0, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': -1, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 1, 'H[2]': 0, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': -1, 'H[1]': 0, 'S[34]': 0, 'S[33]': 1, 'N[15]': 0, 'S[32]': -1, 'O[17]': 1, 'H[2]': 0, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': -2, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 2, 'H[2]': 0, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 1, 'S[32]': 0, 'O[17]': 0, 'H[2]': 0, 'N[14]': -1}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 1, 'N[15]': 1, 'S[32]': -1, 'O[17]': 0, 'H[2]': 0, 'N[14]': -1}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': -1, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 1, 'S[32]': 0, 'O[17]': 1, 'H[2]': 0, 'N[14]': -1}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 2, 'S[32]': 0, 'O[17]': 0, 'H[2]': 0, 'N[14]': -2}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': -1, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 0, 'H[2]': 1, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': -1, 'S[34]': 0, 'S[33]': 1, 'N[15]': 0, 'S[32]': -1, 'O[17]': 0, 'H[2]': 1, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': -1, 'H[1]': -1, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 1, 'H[2]': 1, 'N[14]': 0}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': -1, 'S[34]': 0, 'S[33]': 0, 'N[15]': 1, 'S[32]': 0, 'O[17]': 0, 'H[2]': 1, 'N[14]': -1}, {'C[12]': 0, 'C[13]': 0, 'O[18]': 0, 'O[16]': 0, 'H[1]': -2, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 0, 'H[2]': 2, 'N[14]': 0}, {'C[12]': -1, 'C[13]': 1, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 0, 'H[2]': 0, 'N[14]': 0}, {'C[12]': -1, 'C[13]': 1, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 1, 'N[15]': 0, 'S[32]': -1, 'O[17]': 0, 'H[2]': 0, 'N[14]': 0}, {'C[12]': -1, 'C[13]': 1, 'O[18]': 0, 'O[16]': -1, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 1, 'H[2]': 0, 'N[14]': 0}, {'C[12]': -1, 'C[13]': 1, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 1, 'S[32]': 0, 'O[17]': 0, 'H[2]': 0, 'N[14]': -1}, {'C[12]': -1, 'C[13]': 1, 'O[18]': 0, 'O[16]': 0, 'H[1]': -1, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 0, 'H[2]': 1, 'N[14]': 0}, {'C[12]': -2, 'C[13]': 2, 'O[18]': 0, 'O[16]': 0, 'H[1]': 0, 'S[34]': 0, 'S[33]': 0, 'N[15]': 0, 'S[32]': 0, 'O[17]': 0, 'H[2]': 0, 'N[14]': 0}]
    >>> all([str(HI[i][key])[:10]==str(ref[i][key])[:10] for i in range(len(HI)) for key in HI[i]])
    True
    >>> Hdist = compLib['WSAGLTSSQVDLYIPK++'].heavyMS1distribution
    >>> str(Hdist[0])[:8]
    '0.404555'
    >>> str(Hdist[1])[:8]
    '0.389307'
    >>> str(Hdist[2])[:8]
    '0.206137'
    >>> compLib['WSAGLTSSQVDLYIPK++'].includedPeaks
    ['l0', 'h0', 'l1', 'h1', 'l2', 'h2']
    >>> LI = compLib['WSAGLTSSQVDLYIPK++'].lightIsolatedIsoforms
    >>> ref = [{'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 1, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 2, 'O[16]': 0, 'S[32]': -2, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 1, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': -1, 'S[32]': -1, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -2, 'S[32]': 0, 'C[13]': 0, 'O[17]': 2, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -2, 'S[34]': 0, 'O[18]': 0, 'N[15]': 2, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -2, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 2}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 1, 'O[17]': 1, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': -1, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 2, 'O[17]': 0, 'H[1]': 0, 'C[12]': -2, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}]
    >>> all([str(LI[i][key])[:10]==str(ref[i][key])[:10] for i in range(len(LI)) for key in LI[i]])
    True
    >>> overlap = compLib['WSAGLTSSQVDLYIPK++'].overlappingPeaks
    >>> ref = {'y14 l2++': 'y14 h0++', 'y10 l2+': 'y10 h0+', 'y5 l0++': None, 'y12 h0++': 'y12 l2++', 'y11 h1++': None, 'y2 h2+': None, 'y6 h2+': None, 'y10 l2++': 'y10 h0++', 'y13 h2+': None, 'y5 h2+': None, 'y7 l1++': None, 'y7 h0++': 'y7 l2++', 'y12 l0++': None, 'y13 l0+': None, 'y7 l0++': None, 'y10 l0+': None, 'y12 l2++': 'y12 h0++', 'y3 h0++': 'y3 l2++', 'y7 l0+': None, 'y13 h0+': 'y13 l2+', 'y16 h1++': None, 'y2 l2+': 'y2 h0+', 'y11 h1+': None, 'y13 l1+': None, 'y16 h0++': 'y16 l2++', 'y12 h2+': None, 'y13 l2++': 'y13 h0++', 'y8 h0++': 'y8 l2++', 'y5 h0+': 'y5 l2+', 'y2 l0++': None, 'y6 h0++': 'y6 l2++', 'y15 l2+': 'y15 h0+', 'y8 l0+': None, 'l2': 'h0', 'y7 h1+': None, 'y10 h0++': 'y10 l2++', 'y8 l1++': None, 'y5 h0++': 'y5 l2++', 'y2 l0+': None, 'y14 h2+': None, 'y15 h1++': None, 'y4 h1++': None, 'y6 l1+': None, 'y4 h2++': None, 'y10 l1++': None, 'y3 h1+': None, 'y14 h0+': 'y14 l2+', 'y4 h1+': None, 'y7 h0+': 'y7 l2+', 'y6 l2++': 'y6 h0++', 'y3 h2++': None, 'y9 l1++': None, 'h0': 'l2', 'y11 l2++': 'y11 h0++', 'y4 l0+': None, 'y15 h2++': None, 'y11 l2+': 'y11 h0+', 'y4 h0+': 'y4 l2+', 'y9 h2++': None, 'y15 l2++': 'y15 h0++', 'y15 h2+': None, 'y5 h1++': None, 'y9 h1+': None, 'y12 l1++': None, 'y11 h0+': 'y11 l2+', 'y16 h0+': 'y16 l2+', 'y15 h0+': 'y15 l2+', 'y8 l2++': 'y8 h0++', 'y2 h2++': None, 'y13 l1++': None, 'y8 h1++': None, 'y10 h2++': None, 'y14 h1++': None, 'y16 h1+': None, 'y14 l2+': 'y14 h0+', 'y7 h1++': None, 'y13 h2++': None, 'y2 l2++': 'y2 h0++', 'y3 l0+': None, 'y15 h0++': 'y15 l2++', 'y7 l1+': None, 'y14 l0++': None, 'y11 l0+': None, 'y15 l1+': None, 'y14 h1+': None, 'y4 l2+': 'y4 h0+', 'y2 h1+': None, 'y13 l2+': 'y13 h0+', 'y10 h0+': 'y10 l2+', 'y16 l2+': 'y16 h0+', 'y9 l2+': 'y9 h0+', 'y14 l0+': None, 'l0': None, 'y16 l0++': None, 'y5 l0+': None, 'y3 l2++': 'y3 h0++', 'y6 h0+': 'y6 l2+', 'y10 h2+': None, 'y3 l2+': 'y3 h0+', 'y11 l1++': None, 'y13 h1++': None, 'y14 l1++': None, 'y15 l0++': None, 'y2 h0+': 'y2 l2+', 'y3 l0++': None, 'y4 l0++': None, 'y11 h2+': None, 'y15 l0+': None, 'y2 l1+': None, 'y8 h1+': None, 'y6 h2++': None, 'y13 l0++': None, 'y9 h2+': None, 'y16 l1++': None, 'y8 l1+': None, 'y5 l1+': None, 'y4 h0++': 'y4 l2++', 'y5 l1++': None, 'y4 l1+': None, 'y2 h1++': None, 'y8 h0+': 'y8 l2+', 'y12 h1+': None, 'y9 h1++': None, 'y5 h2++': None, 'y9 l0+': None, 'y11 l0++': None, 'y7 l2+': 'y7 h0+', 'y4 l1++': None, 'y2 h0++': 'y2 l2++', 'y11 h0++': 'y11 l2++', 'y7 l2++': 'y7 h0++', 'y5 l2++': 'y5 h0++', 'y16 h2+': None, 'y8 h2++': None, 'y12 h2++': None, 'y16 l0+': None, 'y5 l2+': 'y5 h0+', 'y6 h1+': None, 'y9 h0++': 'y9 l2++', 'y16 h2++': None, 'y4 h2+': None, 'h1': None, 'y3 h1++': None, 'y13 h1+': None, 'y12 h0+': 'y12 l2+', 'y3 l1++': None, 'y13 h0++': 'y13 l2++', 'y9 l2++': 'y9 h0++', 'y6 l0++': None, 'y7 h2++': None, 'y16 l2++': 'y16 h0++', 'y14 h2++': None, 'y11 l1+': None, 'y2 l1++': None, 'y12 l2+': 'y12 h0+', 'y15 h1+': None, 'y14 l1+': None, 'y6 h1++': None, 'y10 h1++': None, 'y6 l0+': None, 'y16 l1+': None, 'y8 l2+': 'y8 h0+', 'y9 l0++': None, 'y6 l1++': None, 'y3 h0+': 'y3 l2+', 'y7 h2+': None, 'y8 h2+': None, 'y5 h1+': None, 'y12 l0+': None, 'y10 h1+': None, 'y9 h0+': 'y9 l2+', 'y3 l1+': None, 'y12 h1++': None, 'l1': None, 'y10 l0++': None, 'y11 h2++': None, 'y10 l1+': None, 'y14 h0++': 'y14 l2++', 'y8 l0++': None, 'y3 h2+': None, 'y15 l1++': None, 'y9 l1+': None, 'y12 l1+': None, 'y4 l2++': 'y4 h0++', 'h2': None, 'y6 l2+': 'y6 h0+'}
    >>> all([overlap[key]==ref[key] for key in overlap])
    True
    >>> CC = compLib['FVYHLSDLCK+++'].compensationConstants
    >>> ref = {'y6 h0++': 0.7374486485221844, 'y3 l0+': 0.6331007312615761, 'y10 l1++': 1.0000646594865306, 'y9 h2++': 1.1624321801289315, 'y10 h0+': 0.9998066585399433, 'y9 h0++': 0.9156557895405797, 'y6 l0++': 0.7378314124241738, 'y7 h2+': 1.553829401176598, 'y2 h0+': 0.5912253206818372, 'y8 h0+': 0.8688323735220874, 'y2 h1+': 3.0189620205186776, 'y4 l0+': 0.6655309919093004, 'y6 h2++': 1.8063310318386692, 'y10 h1+': 1.0001323225169165, 'y9 l1++': 1.0694251020004282, 'y5 h1+': 1.6558389906859747, 'y7 l0++': 0.7918677117054163, 'y2 h2+': 3.093423464654036, 'y5 h2++': 2.0835754278103353, 'y2 l2+': 3.094130813031855, 'y5 l0+': 0.6909741876905127, 'y9 l1+': 1.0695204192610732, 'y9 l0++': 0.9158044453953434, 'y3 h2++': 2.7030884015900773, 'y3 h0++': 0.6327053609606235, 'y5 h2+': 2.0840125320300364, 'y9 h1++': 1.071109872655263, 'y8 h1++': 1.126802590552579, 'y7 h1+': 1.2653921713504106, 'y4 h1++': 1.8263146588355121, 'y9 l2+': 1.1612537169243222, 'y8 l1+': 1.1237984738652123, 'y4 h0++': 0.6651627262577564, 'y2 l0+': 0.5916911218109059, 'y4 h2++': 2.3144809447628485, 'y8 l0+': 0.8690551625665281, 'y7 l1+': 1.2582034555123878, 'y6 l1++': 1.4147715459704289, 'y2 l1++': 2.89748488410581, 'y3 h1++': 2.142113813688906, 'y2 h2++': 3.0929651328603116, 'y5 l2+': 2.07667218003944, 'y6 h2+': 1.8067154630086055, 'y4 l1+': 1.796024207739776, 'y3 h2+': 2.70365205567334, 'y6 l2+': 1.8000493897957819, 'y2 h1++': 3.016783329578188, 'y6 h0+': 0.7373713231659267, 'y3 l2++': 2.693636910201179, 'y6 h1+': 1.4278849958769508, 'y8 h2+': 1.2831604481147805, 'y2 l2++': 3.093643822256929, 'y6 l1+': 1.4150606315780878, 'y9 l2++': 1.1610539845153396, 'y7 l2+': 1.548869439825113, 'y8 l1++': 1.1236773300795047, 'y5 l0++': 0.6910474993052435, 'y3 l2+': 2.6942111598081233, 'y8 l0++': 0.8691425532760249, 'y4 l0++': 0.6656021954031318, 'y10 l2++': 1.0001532021670205, 'y7 h1++': 1.2651934447314133, 'y8 h1+': 1.1269270319256441, 'y10 h2+': 1.0003088812265686, 'y3 l0++': 0.6331691961446779, 'y6 l0+': 0.7377541481608424, 'y10 l0++': 0.9999035053432895, 'y5 l2++': 2.076233413989923, 'y7 l0+': 0.791786109260822, 'y4 l1++': 1.7954355826669113, 'y5 h0++': 0.6906297324138571, 'y7 h0++': 0.7915398994319592, 'y7 l2++': 1.5485530686907427, 'y8 l2+': 1.2806770719733185, 'y2 h0++': 0.5912898156031117, 'y7 l1++': 1.2580109903389238, 'y8 h2++': 1.282922900309632, 'y3 h1+': 2.1430632872303716, 'y2 l1+': 2.899456756315949, 'y10 l2+': 1.0003064470785852, 'y5 l1+': 1.6334661076440364, 'y5 l1++': 1.6330173276760471, 'y6 l2++': 1.7996662734851867, 'y3 l1++': 2.09257867926094, 'y4 h0+': 0.6650914989357843, 'y9 h2+': 1.1626335872833442, 'y4 l2+': 2.3065927219139533, 'y9 h1+': 1.0712075938781367, 'y3 l1+': 2.093467322335438, 'y4 h1+': 1.8269357748910204, 'y6 h1++': 1.4275846513479231, 'y5 h1++': 1.6553686247866535, 'y10 l0+': 0.9998070171630381, 'y4 l2++': 2.3060999726752986, 'y5 h0+': 0.6905563840091543, 'y2 l0++': 0.5917556340454072, 'y9 l0+': 0.9157137240298588, 'y8 h0++': 0.8689198875872057, 'y7 h2++': 1.5535107846465126, 'y10 h2++': 1.000154419023521, 'y10 h0++': 0.9999033260118317, 'y4 h2+': 2.314969425534853, 'y8 l2++': 1.2804414974328826, 'y9 h0+': 0.9155649243408556, 'y10 l1+': 1.000129346297267, 'y3 h0+': 0.6326368890877941, 'y10 h1++': 1.00006614722629, 'y7 h0+': 0.791458209221028}
    >>> all([str(CC[key])[:10]==str(ref[key])[:10] for key in CC])
    True
    >>> HI = compLib['FVYHLSDLCK+++'].heavyIsolatedIsoforms
    >>> ref = [{'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 1, 'O[18]': 0, 'S[32]': -1, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 1, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': -1, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 2, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': -2, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 1, 'S[32]': 0, 'O[16]': -1, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': -1, 'O[17]': 1}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 1, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': -1, 'O[16]': -1, 'O[17]': 1}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': -2, 'O[17]': 2}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': -1, 'S[33]': 0, 'N[15]': 1, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': -1, 'S[33]': 1, 'N[15]': 1, 'S[34]': 0, 'O[18]': 0, 'S[32]': -1, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': -1, 'S[33]': 0, 'N[15]': 1, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': -1, 'O[17]': 1}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 0, 'H[1]': 0, 'N[14]': -2, 'S[33]': 0, 'N[15]': 2, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 1, 'H[1]': -1, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 1, 'H[1]': -1, 'N[14]': 0, 'S[33]': 1, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': -1, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 1, 'H[1]': -1, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': -1, 'O[17]': 1}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 1, 'H[1]': -1, 'N[14]': -1, 'S[33]': 0, 'N[15]': 1, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 0, 'C[12]': 0, 'H[2]': 2, 'H[1]': -2, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 1, 'C[12]': -1, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 1, 'C[12]': -1, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 1, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': -1, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 1, 'C[12]': -1, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': -1, 'O[17]': 1}, {'C[13]': 1, 'C[12]': -1, 'H[2]': 0, 'H[1]': 0, 'N[14]': -1, 'S[33]': 0, 'N[15]': 1, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 1, 'C[12]': -1, 'H[2]': 1, 'H[1]': -1, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}, {'C[13]': 2, 'C[12]': -2, 'H[2]': 0, 'H[1]': 0, 'N[14]': 0, 'S[33]': 0, 'N[15]': 0, 'S[34]': 0, 'O[18]': 0, 'S[32]': 0, 'O[16]': 0, 'O[17]': 0}]
    >>> all([str(HI[i][key])[:10]==str(ref[i][key])[:10] for i in range(len(HI)) for key in HI[i]])
    True
    >>> compLib['FVYHLSDLCK+++'].includedPeaks
    ['l0', 'h0', 'l1', 'h1', 'l2', 'h2']
    >>> LI = compLib['FVYHLSDLCK+++'].lightIsolatedIsoforms
    >>> ref = [{'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 1, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 2, 'O[16]': 0, 'S[32]': -2, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 1, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': -1, 'S[32]': -1, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -2, 'S[32]': 0, 'C[13]': 0, 'O[17]': 2, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -2, 'S[34]': 0, 'O[18]': 0, 'N[15]': 2, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -2, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 2}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 1, 'O[17]': 1, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': -1, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 2, 'O[17]': 0, 'H[1]': 0, 'C[12]': -2, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}]
    >>> all([str(LI[i][key])[:10]==str(ref[i][key])[:10] for i in range(len(LI)) for key in LI[i]])
    True
    >>> overlap = compLib['FVYHLSDLCK+++'].overlappingPeaks
    >>> ref = {'y10 l2+': 'y10 h0+', 'y4 l1++': None, 'y2 h0+': 'y2 l2+', 'y2 h2+': None, 'y6 h2+': None, 'y3 l0++': None, 'y4 l0++': None, 'y5 h2+': None, 'y7 l1++': None, 'y9 l0+': None, 'y2 l1+': None, 'y8 h1+': None, 'y7 l0++': None, 'y10 l0+': None, 'y2 l2++': 'y2 h0++', 'y7 l0+': None, 'y5 h1+': None, 'y2 l2+': 'y2 h0+', 'y8 l1+': None, 'y5 l1+': None, 'y4 h0++': 'y4 l2++', 'y5 l1++': None, 'y4 l1+': None, 'y8 h0++': 'y8 l2++', 'y5 h0+': 'y5 l2+', 'y2 h1++': None, 'y2 l0++': None, 'y6 h0++': 'y6 l2++', 'y8 h0+': 'y8 l2+', 'y3 l1++': None, 'y8 l0+': None, 'y9 h1++': None, 'l2': 'h0', 'y10 h1++': None, 'y6 l1++': None, 'y10 h0++': 'y10 l2++', 'y8 l1++': None, 'y5 h0++': 'y5 l2++', 'y7 l2+': 'y7 h0+', 'y5 l0++': None, 'y2 l0+': None, 'y2 l1++': None, 'y7 l2++': 'y7 h0++', 'y4 h1++': None, 'y6 l1+': None, 'y4 h2++': None, 'y6 h1++': None, 'y10 l1++': None, 'y3 h1+': None, 'y4 h1+': None, 'y5 l2+': 'y5 h0+', 'y6 l2++': 'y6 h0++', 'y6 h1+': None, 'y9 h0++': 'y9 l2++', 'y9 h2+': None, 'y8 h2++': None, 'y4 h2+': None, 'h1': None, 'y3 h1++': None, 'y4 l0+': None, 'y6 l2+': 'y6 h0+', 'y4 h0+': 'y4 l2+', 'y9 h2++': None, 'y9 l1+': None, 'y9 l2++': 'y9 h0++', 'y5 h1++': None, 'y6 l0++': None, 'y7 h2++': None, 'y9 h1+': None, 'y8 l0++': None, 'y7 h0+': 'y7 l2+', 'y8 l2++': 'y8 h0++', 'y6 h2++': None, 'y10 l2++': 'y10 h0++', 'h0': 'l2', 'y3 h2++': None, 'y2 h0++': 'y2 l2++', 'y7 h0++': 'y7 l2++', 'y10 h2++': None, 'y5 h2++': None, 'y9 l1++': None, 'y6 l0+': None, 'y7 h1++': None, 'y3 h0++': 'y3 l2++', 'y8 l2+': 'y8 h0+', 'y3 l0+': None, 'y9 l0++': None, 'y7 h1+': None, 'y5 l2++': 'y5 h0++', 'y7 l1+': None, 'y3 h0+': 'y3 l2+', 'y7 h2+': None, 'y2 h2++': None, 'y3 l2+': 'y3 h0+', 'y8 h2+': None, 'y4 l2+': 'y4 h0+', 'y2 h1+': None, 'y10 h1+': None, 'y9 h0+': 'y9 l2+', 'y3 l1+': None, 'y10 h0+': 'y10 l2+', 'y9 l2+': 'y9 h0+', 'l1': None, 'y10 l0++': None, 'y8 h1++': None, 'y10 l1+': None, 'l0': None, 'y5 l0+': None, 'y3 h2+': None, 'y3 l2++': 'y3 h0++', 'y6 h0+': 'y6 l2+', 'y10 h2+': None, 'y4 l2++': 'y4 h0++', 'h2': None}
    >>> all([overlap[key]==ref[key] for key in overlap])
    True
    
    
    """
    pass

if __name__ == '__main__':
    
    import doctest
    doctest.testmod()
