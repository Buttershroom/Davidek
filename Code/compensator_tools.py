# -*- coding: utf-8 -*-
"""
Created on Tue Feb 14 13:24:39 2017

@author: max.karlsson
"""
from pyteomics import mass
from math import floor
from Printicek import daviPrint
from copy import deepcopy

def calculate_composition(sequence, charge, IAA, heavy=False, labels=None):
    """ Returns a dictionary of the monoisotopic atomic composition of a given 
        sequence.
        If heavy, the labeled atoms will be removed from the composition as 
        these do not contribute to the distribution.
    
    >>> calculate_composition('PEPTIDECK', 2, 0)==mass.Composition({'H[1]': 72, 'N[14]': 10, 'S[32]': 1, 'O[16]': 17, 'C[12]': 43})
    True
    >>> calculate_composition('PEPTIDECK', 1, 1)==mass.Composition({'H[1]': 74, 'N[14]': 11, 'S[32]': 1, 'O[16]': 18, 'C[12]': 45})
    True
    """
    #Get composition:
    comp = mass.mass.Composition(sequence=sequence)
    #Add H for each charge:
    comp['H'] += charge
    #Add alkylation:
    if IAA:
        cys = sequence.count('C')
        comp['C'] += cys*2
        comp['N'] += cys
        comp['O'] += cys
        comp['H'] += cys*3
    #Make monoisotopic composition:
    monoisotopicComp = mass.mass.Composition({'C[12]': comp['C'],  'C[13]': 0,  'H[1]': comp['H'], 'H[2]': 0, 'N[14]': comp['N'],  'N[15]': 0,  'O[16]':  comp['O'], 'O[17]': 0, 'O[18]': 0, 'S[32]': comp['S'], 'S[33]': 0, 'S[34]': 0})
    
    #Change composition to heavy label isotopes if heavy:
    if heavy:
        #Get number of neutrons in label:
        KC13label, RC13label, KN15label, RN15label = getIsotopesInLabels(labels)
        #Count C13 and N15 in sequence:
        C13 = KC13label*sequence.count('K')
        C13 +=RC13label*sequence.count('R')
        N15 = KN15label*sequence.count('K')
        N15 +=RN15label*sequence.count('R')
        #Change composition to heavy isotopes:
        monoisotopicComp['C[12]']-=C13
        monoisotopicComp['N[14]']-=N15
        
    return monoisotopicComp
    

def getIsotopesInLabels(labels):
    """ Returns the number of C13 and N15 in the labeled R and K.
    
    >>> getIsotopesInLabels('K:0C2N, R:0C2N')
    (0, 0, 2, 2)
    
    """
    KC13label = int(labels.split(',')[0].split(':')[1][0])
    RC13label = int(labels.split(' ')[1].split(':')[1][0])
    KN15label = int(labels.split(',')[0].split(':')[1][2])
    RN15label = int(labels.split(' ')[1].split(':')[1][2])
    
    return KC13label, RC13label, KN15label, RN15label

def compositionFilter(sequence, isoforms, span):
    """ Filters compositions to only include them with number of extra
        neutrons in a stated span.
        Returns a list of compositions.
    >>> isoforms = [{'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 2, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -3, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -3, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 3, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -4, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 4, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 2, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 2, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 2, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -3, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 3, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 1, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 2, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 2, 'O[16]': -3, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 3, 'O[16]': -3, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 3, 'O[16]': -3, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 4, 'O[16]': -4, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': -1, 'S[32]': -2, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -2, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -3, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 3, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 1, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 1, 'N[15]': 1, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -2, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 2, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 1, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 1, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 3, 'O[16]': -3, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': -2, 'S[32]': -1, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': -1, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': -2, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 1, 'N[15]': 2, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': -1, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -3, 'S[32]': 0, 'O[18]': 0, 'N[15]': 3, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -3, 'S[32]': -1, 'O[18]': 0, 'N[15]': 3, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -3, 'S[32]': 0, 'O[18]': 0, 'N[15]': 3, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -4, 'S[32]': 0, 'O[18]': 0, 'N[15]': 4, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -3, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 3, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 2, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -2, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 3, 'O[16]': -3, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 1, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -2, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 1, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -2, 'S[32]': -1, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -3, 'S[32]': 0, 'O[18]': 0, 'N[15]': 3, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -3, 'H[2]': 3}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -3, 'H[2]': 3}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': 0, 'H[1]': -3, 'H[2]': 3}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -3, 'H[2]': 3}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 0, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': 0, 'H[1]': -4, 'H[2]': 4}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -3, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 3, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 1, 'N[15]': 0, 'C[13]': 1, 'S[33]': 1, 'O[17]': 0, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 2, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 1, 'O[16]': -2, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 1, 'O[17]': 2, 'O[16]': -2, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 3, 'O[16]': -3, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -2, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 1, 'N[15]': 1, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': -1, 'O[18]': 0, 'N[15]': 2, 'C[13]': 1, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 1, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -3, 'S[32]': 0, 'O[18]': 0, 'N[15]': 3, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -1, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 1, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -1, 'H[1]': -3, 'H[2]': 3}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 1, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -2, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 2, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 1, 'N[15]': 0, 'C[13]': 2, 'S[33]': 0, 'O[17]': 0, 'O[16]': -1, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 1, 'O[17]': 1, 'O[16]': -1, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 0, 'O[17]': 2, 'O[16]': -2, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 2, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': -1, 'O[18]': 0, 'N[15]': 1, 'C[13]': 2, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 2, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -2, 'S[32]': 0, 'O[18]': 0, 'N[15]': 2, 'C[13]': 2, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -2, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 2, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 2, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -2, 'H[1]': -2, 'H[2]': 2}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 3, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -3, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': -1, 'O[18]': 0, 'N[15]': 0, 'C[13]': 3, 'S[33]': 1, 'O[17]': 0, 'O[16]': 0, 'C[12]': -3, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 3, 'S[33]': 0, 'O[17]': 1, 'O[16]': -1, 'C[12]': -3, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': -1, 'S[32]': 0, 'O[18]': 0, 'N[15]': 1, 'C[13]': 3, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -3, 'H[1]': 0, 'H[2]': 0}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 3, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -3, 'H[1]': -1, 'H[2]': 1}, {'S[34]': 0, 'N[14]': 0, 'S[32]': 0, 'O[18]': 0, 'N[15]': 0, 'C[13]': 4, 'S[33]': 0, 'O[17]': 0, 'O[16]': 0, 'C[12]': -4, 'H[1]': 0, 'H[2]': 0}]
    >>> LI = compositionFilter('WSAGLTSSQVDLYIPK', isoforms, (0,2))
    >>> ref = [{'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 1, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 2, 'O[16]': 0, 'S[32]': -2, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 1, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': -1, 'S[32]': -1, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -2, 'S[32]': 0, 'C[13]': 0, 'O[17]': 2, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -2, 'S[34]': 0, 'O[18]': 0, 'N[15]': 2, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -2, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 2}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 1, 'O[17]': 1, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': -1, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 2, 'O[17]': 0, 'H[1]': 0, 'C[12]': -2, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}]
    >>> all([str(LI[i][key])[:10]==str(ref[i][key])[:10] for i in range(len(LI)) for key in ref[i]])
    True
    
    """
    filteredIsoforms = []
    
    for composition in isoforms:
        C13 = composition['C[13]']
        H2 = composition['H[2]']
        N15 = composition['N[15]']
        O17 = composition['O[17]']
        O18 = composition['O[18]']
        S33 = composition['S[33]']
        S34 = composition['S[34]']
        extraNeutrons = (C13+H2+N15+O17+O18*2+S33+S34*2)
                       
        if span[0]<=extraNeutrons<=span[1]:
            filteredIsoforms.append(composition)
    return filteredIsoforms

def calculate_isoforms(sequence, includedPeaks=(0,0)):
    """ Calculates isoforms that are isolated for both heavy and light peaks.
        Returns a tuple with two lists of heavy and light compositions 
        respectively.
    >>> LI = calculate_isoforms('WSAGLTSSQVDLYIPK', includedPeaks=(0,2))
    >>> ref = [{'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 1, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 2, 'O[16]': 0, 'S[32]': -2, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 1, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': -1, 'S[32]': -1, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -2, 'S[32]': 0, 'C[13]': 0, 'O[17]': 2, 'H[1]': 0, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': 0, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': 0, 'C[12]': 0, 'N[14]': -2, 'S[34]': 0, 'O[18]': 0, 'N[15]': 2, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 0, 'O[17]': 1, 'H[1]': -1, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -1, 'C[12]': 0, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 0, 'O[17]': 0, 'H[1]': -2, 'C[12]': 0, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 2}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 1, 'O[16]': 0, 'S[32]': -1, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': -1, 'S[32]': 0, 'C[13]': 1, 'O[17]': 1, 'H[1]': 0, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': 0, 'C[12]': -1, 'N[14]': -1, 'S[34]': 0, 'O[18]': 0, 'N[15]': 1, 'H[2]': 0}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 1, 'O[17]': 0, 'H[1]': -1, 'C[12]': -1, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 1}, {'S[33]': 0, 'O[16]': 0, 'S[32]': 0, 'C[13]': 2, 'O[17]': 0, 'H[1]': 0, 'C[12]': -2, 'N[14]': 0, 'S[34]': 0, 'O[18]': 0, 'N[15]': 0, 'H[2]': 0}]
    >>> all([str(LI[i][key])[:10]==str(ref[i][key])[:10] for i in range(len(LI)) for key in ref[i]])
    True
    
    """
    
    #Find max extra neutrons:
    maxNeutrons = includedPeaks[1]
    
    
    isoforms = []
    for C13 in range(maxNeutrons+1):
        for H2 in range(maxNeutrons+1):
            for N15 in range(maxNeutrons+1):
                for O17 in range(maxNeutrons+1):
                    for O18 in range(floor(maxNeutrons/2)+1):
                        for S33 in range(maxNeutrons+1):
                            for S34 in range(floor(maxNeutrons/2)+1):
                                #Peak number:
                                extraNeutrons = (C13+H2+N15+O17+O18*2+S33+S34*2)
                                #If the total number of extra neutrons 
                                #exceed the maximum number of extra 
                                #neutrons (peak numbers) that are included
                                #in the isolation window, ignore:
                                if maxNeutrons<extraNeutrons or extraNeutrons<0: 
                                    continue
                                #Make relative composition for this 
                                #specific composition of atoms:
                                relComp = {}
                                relComp['C[12]'] = -C13
                                relComp['C[13]'] = C13
                                relComp['H[1]'] = -H2
                                relComp['H[2]'] = H2
                                relComp['N[14]'] = -N15
                                relComp['N[15]'] = N15
                                relComp['O[16]'] = -(O17+O18)
                                relComp['O[17]'] = O17
                                relComp['O[18]'] = O18
                                relComp['S[32]'] = -(S33+S34)
                                relComp['S[33]'] = S33
                                relComp['S[34]'] = S34
                                
                                isoforms.append(relComp)
    #Get spans of allowed number of extra neutrons for heavy or light sets:
    neutronSpan = includedPeaks
    
    #Filter isoforms to light and heavy:
    isoforms = compositionFilter(sequence, isoforms, neutronSpan)
    
    return isoforms

def calculate_distribution(monoisotopicComposition, relativeIsoforms):
    """ Calculates the peak abundance distribution for a specified sequence
        and charge. Can currently only be used for heavy labeled sequences
        where C and N are isotope labeled. (Of course it can be used for any
        unlabeled sequence)
    
    >>> Lisoforms = calculate_isoforms('WSAGLTSSQVDLYIPK', includedPeaks=(0,2))
    >>> LmonoisoComp = calculate_composition('WSAGLTSSQVDLYIPK', 2, 1, heavy=False, labels=None)
    >>> Hisoforms = calculate_isoforms('WSAGLTSSQVDLYIPK', includedPeaks=(0,2))
    >>> HmonoisoComp = calculate_composition('WSAGLTSSQVDLYIPK', 2, 1, heavy=True, labels='K:0C2N, R:0C2N')
    >>> Ldist = calculate_distribution(LmonoisoComp, Lisoforms)
    >>> str(Ldist[0])[:8]
    '0.402219'
    >>> str(Ldist[1])[:8]
    '0.389999'
    >>> str(Ldist[2])[:8]
    '0.207781'
    >>> Hdist = calculate_distribution(HmonoisoComp, Hisoforms)
    >>> str(Hdist[0])[:8]
    '0.404555'
    >>> str(Hdist[1])[:8]
    '0.389307'
    >>> str(Hdist[2])[:8]
    '0.206137'
    
        
    """
    #Find largest peaknumber in isoforms:
    maxPeakNumber = max([sum([isoform[isotope] for isotope in isoform if isotope in ['C[13]', 'H[2]', 'N[15]', 'O[17]', 'O[18]', 'S[33]', 'S[34]']]) for isoform in relativeIsoforms])
    #Predefine a list for distribution with length of number of peaks included 
    #in isoforms:
    distribution = [0]*(maxPeakNumber+1)
    #Parse through every possible isoform that contributes to the selected
    #isotope cluster:
    for relativeIsoform in relativeIsoforms:
        tempComp = deepcopy(monoisotopicComposition)
        tempComp['C[12]'] -= relativeIsoform['C[13]']
        tempComp['C[13]'] += relativeIsoform['C[13]']
        tempComp['H[1]'] -= relativeIsoform['H[2]']
        tempComp['H[2]'] += relativeIsoform['H[2]']
        tempComp['N[14]'] -= relativeIsoform['N[15]']
        tempComp['N[15]'] += relativeIsoform['N[15]']
        tempComp['O[16]'] -= (relativeIsoform['O[17]']+relativeIsoform['O[18]'])
        tempComp['O[17]'] += relativeIsoform['O[17]']
        tempComp['O[18]'] += relativeIsoform['O[18]']
        tempComp['S[32]'] -= (relativeIsoform['S[33]']+relativeIsoform['S[34]'])
        tempComp['S[33]'] += relativeIsoform['S[33]']
        tempComp['S[34]'] += relativeIsoform['S[34]']
        #Continue if any element is under zero:
        if any([element<0 for element in tempComp.values()]): 
            continue
        #Add abundance of the specific composition:
        peakNumber = sum([relativeIsoform[isotope] for isotope in relativeIsoform if isotope in ['C[13]', 'H[2]', 'N[15]', 'O[17]', 'S[33]']])
        peakNumber += sum([relativeIsoform[isotope]*2 for isotope in relativeIsoform if isotope in ['O[18]', 'S[34]']])
        distribution[peakNumber] += mass.mass.isotopic_composition_abundance(tempComp)
        
    #Normalisation of distribution to the abundances that were isolated:
    distSum = sum(distribution)
    distribution = [peakAbundance/distSum for peakAbundance in distribution]
    distribution = [d for d in distribution if d>0]
    
    '''
    KC13label, RC13label, KN15label, RN15label = getIsotopesInLabels(labels)
    #If no custom set of included peaks are set, use isolated peaks:
    if len(includedPeaks)==0:
        includedPeaks = includedPeaks
    #Distribution among the peaks included in the isolation window. +1 due
    #to that the monoisotopic peak has no extra neutrons:
    if heavy:
        identifyer = 'h'
        isoforms = HorLisoforms
        minC13 = KC13label*sequence.count('K')
        minC13 +=RC13label*sequence.count('R')
        minN15 = KN15label*sequence.count('K')
        minN15 +=RN15label*sequence.count('R')
    else:
        identifyer = 'l'
        isoforms = HorLisoforms
        minC13 = 0
        minN15 = 0
    numberIsolatedPeaks = sum(1 for peak in includedPeaks if peak[0] == identifyer)
    distribution = [0]*numberIsolatedPeaks
    #Calculate monoisotopic composition of ion:
    composition = calculate_composition(sequence, charge, IAA)
    composition['H[1]']+=charge
    #Parse through every possible isoform that contributes to the selected
    #isotope cluster:
    for relativeIsoform in isoforms:
        tempComp = deepcopy(composition)
        extraNeutrons = 0
        #Protect if miscleavage. If miscleaved K or R is removed in 
        #fragmentation, minimum N and C is changed:
        if not sequence.count('K') == sequence.count('K') or not sequence.count('R') == sequence.count('R'):
            lostK = sequence.count('K')-sequence.count('K')
            lostR = sequence.count('R')-sequence.count('R')
            tempComp['C[12]'] += (lostK*KC13label+lostR*RC13label)
            tempComp['C[13]'] -= (lostK*KC13label+lostR*RC13label)
            tempComp['N[14]'] += (lostK*KN15label+lostR*RN15label)
            tempComp['N[15]'] -= (lostK*KN15label+lostR*RN15label)
            #Compensate peak index for lost labels:
            extraNeutrons -= (lostK*KC13label+lostR*RC13label+lostK*KN15label+lostR*RN15label)
        tempComp['C[12]'] -= relativeIsoform['C[13]']
        tempComp['C[13]'] += relativeIsoform['C[13]']
        tempComp['H[1]'] -= relativeIsoform['H[2]']
        tempComp['H[2]'] += relativeIsoform['H[2]']
        tempComp['N[14]'] -= relativeIsoform['N[15]']
        tempComp['N[15]'] += relativeIsoform['N[15]']
        tempComp['O[16]'] -= (relativeIsoform['O[17]']+relativeIsoform['O[18]'])
        tempComp['O[17]'] += relativeIsoform['O[17]']
        tempComp['O[18]'] += relativeIsoform['O[18]']
        tempComp['S[32]'] -= (relativeIsoform['S[33]']+relativeIsoform['S[34]'])
        tempComp['S[33]'] += relativeIsoform['S[33]']
        tempComp['S[34]'] += relativeIsoform['S[34]']
        extraNeutrons += relativeIsoform['C[13]'] + relativeIsoform['H[2]'] + relativeIsoform['N[15]'] + relativeIsoform['O[17]'] + relativeIsoform['O[18]']*2 + relativeIsoform['S[33]'] + relativeIsoform['S[34]']*2
        extraNeutrons -= (minC13+minN15)
        
        #Continue if any element is under zero:
        if any([element<0 for element in tempComp.values()]): 
            continue
        #Add abundance of the specific composition:
        distribution[extraNeutrons] += mass.mass.isotopic_composition_abundance(tempComp)
    #Normalisation of distribution to the abundances that were isolated:
    distSum = sum(distribution)
    distribution = [peakAbundance/distSum for peakAbundance in distribution]
    if distribution[0] == 0:
        daviPrint('Abundance zero error.', pause=True)
    distribution = [peak for peak in distribution if peak>0]
    
    '''
    return distribution

'''
def calculate_labelNeutrons(labels):
    """ Returns the number of extra neutrons in K, vs R label.
    
    >>> calculate_labelNeutrons('K:0C2N, R:0C2N')
    (2, 2)
    >>> calculate_labelNeutrons('K:8C4N, R:6C2N')
    (12, 8)
    """
    KC13label = int(labels.split(',')[0].split(':')[1][0])
    RC13label = int(labels.split(' ')[1].split(':')[1][0])
    KN15label = int(labels.split(',')[0].split(':')[1][2])
    RN15label = int(labels.split(' ')[1].split(':')[1][2])
    KlabelNeutrons = KC13label + KN15label
    RlabelNeutrons = RC13label + RN15label
    return KlabelNeutrons, RlabelNeutrons
    


def calculate_overlappingPeak(fragment, peptideSequence, KlabelNeutrons, RlabelNeutrons, includedPeaks):
    """ Returns which peak the inputted peak overlaps with. 
        Assumes that peaks with the same number of extra neutrons are not 
        resolved. 
        Assumes that the light monoisotopic peak is included in the isolation 
        window.
        Overlapping peak compensation is only done for peaks that are 
        included in the includedPeaks variable, that is peaks that are 
        within the isolation window.
    
    >>> calculate_overlappingPeak('y4 l2++', 'PEPTIDECK', 2, 2, ['l0','l1','l2','h0'])
    'y4 h0++'
    >>> calculate_overlappingPeak('y8 l2++', 'PERTIDECK', 2, 2, ['l0','l1','l2','h0'])
    >>> calculate_overlappingPeak('y8 l3++', 'PERTIDECK', 2, 1, ['l0','l1','l2','h0'])
    'y8 h0++'
    
    """
    fragmentNumber, sequence, charge, heavyLightIdentifyer = getFragmentInfo(fragment, peptideSequence)
    peakNumber = int(fragment.strip('+')[-1])
    #Count the number of K and R in sequence:
    numberK = sequence.count('K')
    numberR = sequence.count('R')
    neutronsInLabel = numberK*KlabelNeutrons+numberR*RlabelNeutrons
    #Pair with potential overlapping peak:
    if heavyLightIdentifyer == 'l':
        overlappingPeak = 'h' + str(peakNumber - neutronsInLabel)
    elif heavyLightIdentifyer == 'h':
        overlappingPeak = 'l' + str(peakNumber + neutronsInLabel)
    if overlappingPeak in includedPeaks:
        overlappingPeak = 'y'+str(fragmentNumber)+' '+overlappingPeak+'+'*charge
        return overlappingPeak

    return None

def calculate_overlappingPrecursorPeak(fragment, sequence, KlabelNeutrons, RlabelNeutrons, includedPeaks, MS1clusterPeaks):
    """ Returns which peak the inputted peak overlaps with. 
        Assumes that peaks with the same number of extra neutrons are not 
        resolved. 
        Assumes that the light monoisotopic peak is included in the isolation 
        window.
        Overlapping peak compensation is only done for peaks that are 
        included in the includedPeaks variable, that is peaks that are 
        within the isolation window.
    
    >>> calculate_overlappingPrecursorPeak('l0', 'PEPTIDECK', 2, 2, ['l0','l1','l2','h0'], ['l0', 'h0', 'l1', 'h1', 'l2', 'h2'])
    >>> calculate_overlappingPrecursorPeak('l1', 'PEPTIDECK', 2, 2, ['l0','l1','l2','h0'], ['l0', 'h0', 'l1', 'h1', 'l2', 'h2'])
    >>> calculate_overlappingPrecursorPeak('l2', 'PEPTIDECK', 2, 2, ['l0','l1','l2','h0'], ['l0', 'h0', 'l1', 'h1', 'l2', 'h2'])
    'h0'
    >>> calculate_overlappingPrecursorPeak('h0', 'PEPTIDECK', 2, 2, ['l0','l1','l2','h0'], ['l0', 'h0', 'l1', 'h1', 'l2', 'h2'])
    'l2'
    """
    peakNumber = int(fragment.strip('+')[-1])
    heavyLightIdentifyer = fragment[0]
    #Count the number of K and R in sequence:
    numberK = sequence.count('K')
    numberR = sequence.count('R')
    neutronsInLabel = numberK*KlabelNeutrons+numberR*RlabelNeutrons
    #Pair with potential overlapping peak:
    if heavyLightIdentifyer == 'l':
        overlappingPeak = 'h' + str(peakNumber - neutronsInLabel)
    elif heavyLightIdentifyer == 'h':
        overlappingPeak = 'l' + str(peakNumber + neutronsInLabel)
    
    if overlappingPeak in MS1clusterPeaks and not int(overlappingPeak[1:])<0 :
        return overlappingPeak
        
    return None
    
def getFragmentInfo(fragment, sequence):
        """ Returns fragmentNumber, sequence, charge and heavy/light identifyer 
            based on peptide sequence and fragment identifyer.
        
        >>> getFragmentInfo('y6 h2+++', 'PEPTIDECK')
        (6, 'TIDECK', 3, 'h')
        >>> getFragmentInfo('y9 l0+', 'PERKTIDECK')
        (9, 'ERKTIDECK', 1, 'l')
        """
        
        fragmentNumber = int(fragment.split(' ')[0][1:])
        sequence = sequence.strip('+')[len(sequence.strip('+'))-fragmentNumber:]
        #Count charge
        charge = fragment.count('+')
        #Find identifyer 'h' or 'l':
        heavyLightIdentifyer = fragment.split(' ')[1][0]
        
        return fragmentNumber, sequence, charge, heavyLightIdentifyer


    

    

'''
if __name__=='__main__':
    import doctest
    doctest.testmod()